From admin at berlios.de  Sat Mar  3 17:10:17 2007
From: admin at berlios.de (admin at berlios.de)
Date: Sat, 3 Mar 2007 18:10:17 +0200 (EET)
Subject: [Linuxdcpp-developers] [Bug #10552] CPU high usage
Message-ID: <200703031610.l23GAHNO006919@unicorn.berlios.de>

Bug #10552, was updated on 2007-Mar-03 18:10
Here is a current snapshot of the bug.

Project: LinuxDC++
Category: None
Status: Open
Resolution: None
Bug Group: None
Priority: 5
Submitted by: iancumihai
Assigned to : none
Summary: CPU high usage

Details: Hello,

There is a high cpu usage when the users number is pretty
big (10.000 users)

here is what i have found using a little gprof.
Allocating a hashmap for each event (10.000 all at once - when joining a hub)
and also creating a new Func1 (waiting for mem-allocator)
can keep the system quite busy.

I think a smart reallocation (taking *func from a pool)
can be an optimization?

I will do so more research whenever i will have the time.

Here is the function with the problem. Commenting this
drops cpu usage to 1-10% (but there no users anymore :) ) 

void Hub::on(ClientListener::UserUpdated, Client *, const OnlineUser &user) throw()
{
	Identity id = user.getIdentity();

	if (!id.isHidden())
	{
		StringMap params;
		getParams_client(params, id);
		Func1<Hub, StringMap> *func = new Func1<Hub, StringMap>(this, &Hub::updateUser_gui, params);
		WulforManager::get()->dispatchGuiFunc(func);
	}
}

Cheers,
Mihai

For detailed info, follow this link:
http://developer.berlios.de/bugs/?func=detailbug&bug_id=10552&group_id=2230


From stanislav.maslovski at gmail.com  Fri Mar  9 10:01:38 2007
From: stanislav.maslovski at gmail.com (Stanislav Maslovski)
Date: Fri, 9 Mar 2007 12:01:38 +0300
Subject: [Linuxdcpp-developers] [PATCH] getting filelists from users with
	nicks in localized	charsets (russian, etc.)
Message-ID: <20070309090138.GA25367@shota.mine.nu>

Consider a client operating in active mode. In order to get a filelist
NmdcHub::connectToMe() first places the triplet (( peerNick, myNick, hubUrl ))
on the list of expected connections. Internally, nicks are stored in utf-8.
Note that peerNick in this triplet gets stored also in utf-8.

Next, NmdcHub::connectToMe() sends
"$ConnectToMe " + toAcp(peerNick) + ....

So far so good. Now the peer connects. ConnectionManager::accept() creates
new UserConnection, sets flags, etc. but because it does not know anything
about peer's encoding (the new connection can be from an arbitrary user from
arbitrary hub) it leaves it with the default (which is Text::systemCharset).

Now peer sends
$MyNick peerNick_in_acp

UserConnection::on() receives this, blindly translates peerNick_in_acp to
utf-8 from the encoding associated with the connection (which is
Text::systemCharset at the moment). If peer's encoding was different we get
an obvious result: the connection is rejected in ConnectionManager::on(MyNick)
because the translation fails and the peer is not found in the list of
expected connections.

Here goes an example session (text below contains russian chars):

NmdcHub::connect ????????
NmdcHub::connectToMe ????????
BufferedSocket::accept() 0x86d2a00
BufferedSocket::run() start 0x86d2a00
ConnectionManager::onMyNick 0x86974e0, ________
Unknown incoming connection from ________
BufferedSocket::run() end 0x86d2a00

In this example, the system locale was ru_RU.UTF-8, but the hub charset was CP1251.
If someone thinks that setting locale to CP1251 will solve the problem, then it
is not so, because there always will be hubs with different encodings and we
want linuxdcpp operate _simultaneously_ on all of them.

The attached patch solves this in the following way. First, the peer nick is
stored on the list of expected connections in ACP, not in uft-8. This is not
a problem, because the stored nick is just a key and is not used for any
other purpose. Next, when UserConnection::on() receives $MyNick it is passed
further untranslated. Peer's nick gets translated to utf-8 later inside
ConnectionManager::on(MyNick) when it becomes possible to determine and set
the correct encoding.

This all can be seen directly from the patch, of course. Perhaps, a better
way of doing things could be to separate incomming connection checking from
ConnectionManager::on(MyNick) and put it in UserConnection::on() or do
something similar.

-- 
Stanislav
-------------- next part --------------
A non-text attachment was scrubbed...
Name: linuxdcpp_encoding_patch.diff
Type: text/x-diff
Size: 3532 bytes
Desc: not available
URL: <https://lists.berlios.de/pipermail/linuxdcpp-developers/attachments/20070309/1eb420d7/attachment.diff>

From stanislav.maslovski at gmail.com  Fri Mar  9 10:43:41 2007
From: stanislav.maslovski at gmail.com (Stanislav Maslovski)
Date: Fri, 9 Mar 2007 12:43:41 +0300
Subject: [Linuxdcpp-developers] [PATCH] parse locale string to get the
	charset
Message-ID: <20070309094341.GA27753@shota.mine.nu>

Parse the string returned by setlocale() to get only the charset part of the
locale if possible. The standard locale format is explained in setlocale() manpage.

-- 
Stanislav
-------------- next part --------------
A non-text attachment was scrubbed...
Name: linuxdcpp_parse_locale_patch.diff
Type: text/x-diff
Size: 744 bytes
Desc: not available
URL: <https://lists.berlios.de/pipermail/linuxdcpp-developers/attachments/20070309/7e52b8a6/attachment.diff>

From steven.sheehy at gmail.com  Sat Mar 10 01:35:50 2007
From: steven.sheehy at gmail.com (Steven Sheehy)
Date: Fri, 09 Mar 2007 18:35:50 -0600
Subject: [Linuxdcpp-developers] [PATCH] parse locale string to get the
 charset
In-Reply-To: <20070309094341.GA27753@shota.mine.nu>
References: <20070309094341.GA27753@shota.mine.nu>
Message-ID: <45F1FD66.2020405@gmail.com>

This is not the first time that someone has misinterpreted what 
Text::getSystemCharset() does. Another person pointed out that nl_langinfo() 
would be better to determine the charset, but I gave him the same argument that 
I'm about to give here.

It is completely pointless to parse for the charset the way it is used here; its 
value simply doesn't matter. Text::getSystemCharset() is never passed to 
iconv(), it only needs to be some unique value so that Text::convert() knows 
that it should call Text::acpToUtf8() or Text::utf8ToAcp(). I could've used an 
empty string to denote this if I wanted, but I chose to use setlocale(LC_CTYPE, 
NULL)'s value since it would be more human-readable. I still use these acp funcs 
in Text::convert() since I doubt upstream would accept my encoding patch otherwise.

By the way, your patch would introduce a memory leak (strdup). Also, this is a 
C++ program, so it's better to do string manipulation using the stl than string.h.

-Steven

Stanislav Maslovski wrote:
> Parse the string returned by setlocale() to get only the charset part of the
> locale if possible. The standard locale format is explained in setlocale() manpage.
> 
> 
> 
> ------------------------------------------------------------------------
> 
> Index: client/Text.cpp
> ===================================================================
> RCS file: /cvsroot/linuxdcpp/linuxdcpp/client/Text.cpp,v
> retrieving revision 1.14
> diff -u -r1.14 Text.cpp
> --- client/Text.cpp	7 Feb 2007 03:27:05 -0000	1.14
> +++ client/Text.cpp	9 Mar 2007 09:32:45 -0000
> @@ -38,7 +38,17 @@
>  
>  	char *ctype = setlocale(LC_CTYPE, NULL);
>  	if(ctype) {
> +		/* parse for the charset if possible, see man setlocale */
> +		char *s, *p, *q;
> +		if(s = strdup(ctype)) {
> +			if(p = strchr(s, '.')) {
> +				if(q = strchr(++p, '@'))
> +					*q = 0;
> +				ctype = p;
> +			}
> +		}
>  		systemCharset = string(ctype);
> +		dcdebug("systemCharset: %s\n", systemCharset.c_str());
>  	} else {
>  		dcdebug("Unable to determine the program's locale");
>  	}
> 
> 
> ------------------------------------------------------------------------
> 
> _______________________________________________
> Linuxdcpp-developers mailing list
> Linuxdcpp-developers at lists.berlios.de
> https://lists.berlios.de/mailman/listinfo/linuxdcpp-developers



From stanislav.maslovski at gmail.com  Sat Mar 10 08:28:38 2007
From: stanislav.maslovski at gmail.com (Stanislav Maslovski)
Date: Sat, 10 Mar 2007 10:28:38 +0300
Subject: [Linuxdcpp-developers] [PATCH] parse locale string to get the
	charset
In-Reply-To: <45F1FD66.2020405@gmail.com>
References: <20070309094341.GA27753@shota.mine.nu> <45F1FD66.2020405@gmail.com>
Message-ID: <fc8d89e90703092328u52ed863yf090d68066b71abd@mail.gmail.com>

Hello,

On 10/03/07, Steven Sheehy <steven.sheehy at gmail.com> wrote:

> Text::getSystemCharset() is never passed to iconv()

If, and only if, Text::convert() is used to translate between utf-8
and something (in both directions). I understood that you added
iconv() to treat more general case.

> By the way, your patch would introduce a memory leak (strdup).

Well, memleak is actually something different: it is when the amount
of allocated memory grows with time. I believe Text::initialize() is
called just once, at the startup time.

> Also, this is a  C++ program, so it's better to do string manipulation
> using the stl than string.h.

Just a matter of preference, but OK.

-- 
BR,
Stanislav


From steven.sheehy at gmail.com  Sat Mar 10 16:26:57 2007
From: steven.sheehy at gmail.com (Steven Sheehy)
Date: Sat, 10 Mar 2007 09:26:57 -0600
Subject: [Linuxdcpp-developers] [PATCH] parse locale string to get the
 charset
In-Reply-To: <fc8d89e90703092328u52ed863yf090d68066b71abd@mail.gmail.com>
References: <20070309094341.GA27753@shota.mine.nu> <45F1FD66.2020405@gmail.com>
	<fc8d89e90703092328u52ed863yf090d68066b71abd@mail.gmail.com>
Message-ID: <45F2CE41.1070102@gmail.com>

Stanislav Maslovski wrote:
> Hello,
> 
> On 10/03/07, Steven Sheehy <steven.sheehy at gmail.com> wrote:
> 
>> Text::getSystemCharset() is never passed to iconv()
> 
> If, and only if, Text::convert() is used to translate between utf-8
> and something (in both directions). I understood that you added
> iconv() to treat more general case.

Text::convert() already translates between utf-8 and "something" and vice versa. 
My point was that "something" is not acp (AKA what windows calls the system 
charset). Thus worrying about the value of Text::systemCharset is pointless 
because it is never passed to iconv(). If you're saying that you're thinking 
about how it might be useful in the future if it does become used with iconv(), 
then I can understand why it would be necessary. Before I ever committed the 
encoding  fixes, I had code to remove the country & language code from ctype but 
I chose to remove it at that time.

> 
>> By the way, your patch would introduce a memory leak (strdup).
> 
> Well, memleak is actually something different: it is when the amount
> of allocated memory grows with time. I believe Text::initialize() is
> called just once, at the startup time.

Not so. A memory leak is when a program fails to release memory when it's no 
longer needed. It makes no difference if it is done only once at startup or over 
and over during run-time. Every call to malloc() (and functions that call malloc 
like stringdup and new) must have a corresponding free() (or delete). The 
pointer char *s is allocated memory, but that pointer to the memory is then 
lost. Thus you have memory on the heap that can no longer be reached and can't 
be re-used since it's still marked as active. _This_ is a memory leak. What you 
stated can be the _result_ of a memory leak that occurs over and over. Also, 
from wikipedia: "Note that constantly increasing memory usage is not necessarily 
evidence of a memory leak."

> 
>> Also, this is a  C++ program, so it's better to do string manipulation
>> using the stl than string.h.
> 
> Just a matter of preference, but OK.
> 

It's not a matter of preference, it's a matter of standardization.


From steven.sheehy at gmail.com  Sun Mar 11 04:28:31 2007
From: steven.sheehy at gmail.com (Steven Sheehy)
Date: Sat, 10 Mar 2007 21:28:31 -0600
Subject: [Linuxdcpp-developers] [PATCH] parse locale string to get the
 charset
In-Reply-To: <fc8d89e90703092328u52ed863yf090d68066b71abd@mail.gmail.com>
References: <20070309094341.GA27753@shota.mine.nu> <45F1FD66.2020405@gmail.com>
	<fc8d89e90703092328u52ed863yf090d68066b71abd@mail.gmail.com>
Message-ID: <45F3775F.8030904@gmail.com>

Stanislav Maslovski wrote:
> Hello,
> 
> On 10/03/07, Steven Sheehy <steven.sheehy at gmail.com> wrote:
>> Text::getSystemCharset() is never passed to iconv()
> 
> If, and only if, Text::convert() is used to translate between utf-8
> and something (in both directions). I understood that you added
> iconv() to treat more general case.
> 

I reread what you said and I think I understand what you mean now. You're saying 
its value would matter if the to and from charsets passed to Text::convert() 
were Text::systemCharset and some other charset that isn't utf-8. This would 
cause the check to see whether utf8ToAcp/acpToUtf8 should be called to fail and 
subsequently iconv_open would be passed Text::systemCharset. If you grep the 
code, you can see that all calls to Text::convert() are currently either 
converting from or to utf-8 (since I use the rule that all text must be 
immediately converted to utf-8 when it is read from a socket or a file). But I 
can see your point where it might be useful in the future if this situation 
should ever change.

This then brings up the point whether we should switch to nl_langinfo(CODESET) 
or stick with setlocale(LC_CTYPE, NULL) if we do this. nl_langinfo() is 
supposedly more accurate, but not useable on windows like setlocale().


From stanislav.maslovski at gmail.com  Mon Mar 12 10:04:07 2007
From: stanislav.maslovski at gmail.com (Stanislav Maslovski)
Date: Mon, 12 Mar 2007 12:04:07 +0300
Subject: [Linuxdcpp-developers] [PATCH] parse locale string to get
	the	charset
In-Reply-To: <45F3775F.8030904@gmail.com>
References: <20070309094341.GA27753@shota.mine.nu> <45F1FD66.2020405@gmail.com>
	<fc8d89e90703092328u52ed863yf090d68066b71abd@mail.gmail.com>
	<45F3775F.8030904@gmail.com>
Message-ID: <20070312090407.GA26621@shota.mine.nu>

Hello,

On Sat, Mar 10, 2007 at 09:28:31PM -0600, Steven Sheehy wrote:
> Stanislav Maslovski wrote:
> > Hello,
> > 
> > On 10/03/07, Steven Sheehy <steven.sheehy at gmail.com> wrote:
> >> Text::getSystemCharset() is never passed to iconv()
> > 
> > If, and only if, Text::convert() is used to translate between utf-8
> > and something (in both directions). I understood that you added
> > iconv() to treat more general case.
> > 
> 
> I reread what you said and I think I understand what you mean now. You're saying 
> its value would matter if the to and from charsets passed to Text::convert() 
> were Text::systemCharset and some other charset that isn't utf-8. This would 
> cause the check to see whether utf8ToAcp/acpToUtf8 should be called to fail and 
> subsequently iconv_open would be passed Text::systemCharset.

Yes, that was what I meant. By the way, I am glad to see that your wording
changed from "completely pointless" to "I reread what you said and I think I
understand now". Certain progress is seen.

> If you grep the  code, you can see that all calls to Text::convert() are currently either 
> converting from or to utf-8..

Yes, true. My point was that if you kept iconv() in the code, then you
obviously wanted to use it at a time.

> This then brings up the point whether we should switch to nl_langinfo(CODESET) 
> or stick with setlocale(LC_CTYPE, NULL) if we do this. nl_langinfo() is 
> supposedly more accurate, but not useable on windows like setlocale().

Putting aside the memleak flame, parsing locale string is simple, perhaps,
this is an acceptable solution.

By the way, you have not answered the other mail:
https://lists.berlios.de/pipermail/linuxdcpp-developers/2007-March/000424.html

-- 
Stanislav


From stanislav.maslovski at gmail.com  Mon Mar 12 10:37:41 2007
From: stanislav.maslovski at gmail.com (Stanislav Maslovski)
Date: Mon, 12 Mar 2007 12:37:41 +0300
Subject: [Linuxdcpp-developers] [PATCH] parse locale string to get
	the	charset
In-Reply-To: <20070312090407.GA26621@shota.mine.nu>
References: <20070309094341.GA27753@shota.mine.nu> <45F1FD66.2020405@gmail.com>
	<fc8d89e90703092328u52ed863yf090d68066b71abd@mail.gmail.com>
	<45F3775F.8030904@gmail.com> <20070312090407.GA26621@shota.mine.nu>
Message-ID: <20070312093741.GA27848@shota.mine.nu>

Hello again,

On Mon, Mar 12, 2007 at 12:04:07PM +0300, Stanislav Maslovski wrote:
> > If you grep the  code, you can see that all calls to Text::convert() are currently either 
> > converting from or to utf-8..
> 
> ... My point was that if you kept iconv() in the code, then you
> obviously wanted to use it at a time.

Oops, seems that now I myself stepped into the flames, so forget this quoted phrase
above because it happened to be logically incorrect ;)

BR,
-- 
Stanislav


From steven.sheehy at gmail.com  Tue Mar 13 03:17:31 2007
From: steven.sheehy at gmail.com (Steven Sheehy)
Date: Mon, 12 Mar 2007 21:17:31 -0500
Subject: [Linuxdcpp-developers] [PATCH] parse locale string to get	the
 charset
In-Reply-To: <20070312093741.GA27848@shota.mine.nu>
References: <20070309094341.GA27753@shota.mine.nu>
	<45F1FD66.2020405@gmail.com>	<fc8d89e90703092328u52ed863yf090d68066b71abd@mail.gmail.com>	<45F3775F.8030904@gmail.com>
	<20070312090407.GA26621@shota.mine.nu>
	<20070312093741.GA27848@shota.mine.nu>
Message-ID: <45F609BB.4020404@gmail.com>

Stanislav Maslovski wrote:
 > Hello,
 >
 > On Sat, Mar 10, 2007 at 09:28:31PM -0600, Steven Sheehy wrote:
 >> Stanislav Maslovski wrote:
 >>> Hello,
 >>>
 >>> On 10/03/07, Steven Sheehy <steven.sheehy at gmail.com> wrote:
 >>>> Text::getSystemCharset() is never passed to iconv()
 >>> If, and only if, Text::convert() is used to translate between utf-8
 >>> and something (in both directions). I understood that you added
 >>> iconv() to treat more general case.
 >>>
 >> I reread what you said and I think I understand what you mean now. You're 
saying
 >> its value would matter if the to and from charsets passed to Text::convert()
 >> were Text::systemCharset and some other charset that isn't utf-8. This would
 >> cause the check to see whether utf8ToAcp/acpToUtf8 should be called to fail and
 >> subsequently iconv_open would be passed Text::systemCharset.
 >
 > Yes, that was what I meant. By the way, I am glad to see that your wording
 > changed from "completely pointless" to "I reread what you said and I think I
 > understand now". Certain progress is seen.
 >
 >> If you grep the  code, you can see that all calls to Text::convert() are 
currently either
 >> converting from or to utf-8..
 >
 > Yes, true. My point was that if you kept iconv() in the code, then you
 > obviously wanted to use it at a time.
 >
 >> This then brings up the point whether we should switch to nl_langinfo(CODESET)
 >> or stick with setlocale(LC_CTYPE, NULL) if we do this. nl_langinfo() is
 >> supposedly more accurate, but not useable on windows like setlocale().
 >
 > Putting aside the memleak flame, parsing locale string is simple, perhaps,
 > this is an acceptable solution.

Hmmm...seems you are confused on the definition of "flame", too. It must make 
you feel better to nonchalantly insult others than to admit that you made a mistake.

 >
 > By the way, you have not answered the other mail:
 > https://lists.berlios.de/pipermail/linuxdcpp-developers/2007-March/000424.html
 >


Haven't gotten to it yet.



From stanislav.maslovski at gmail.com  Tue Mar 13 09:44:06 2007
From: stanislav.maslovski at gmail.com (Stanislav Maslovski)
Date: Tue, 13 Mar 2007 11:44:06 +0300
Subject: [Linuxdcpp-developers] [PATCH] parse locale string to get
	the	charset
In-Reply-To: <45F609BB.4020404@gmail.com>
References: <20070309094341.GA27753@shota.mine.nu> <45F1FD66.2020405@gmail.com>
	<fc8d89e90703092328u52ed863yf090d68066b71abd@mail.gmail.com>
	<45F3775F.8030904@gmail.com> <20070312090407.GA26621@shota.mine.nu>
	<20070312093741.GA27848@shota.mine.nu> <45F609BB.4020404@gmail.com>
Message-ID: <20070313084406.GA32763@shota.mine.nu>

Hello,

On Mon, Mar 12, 2007 at 09:17:31PM -0500, Steven Sheehy wrote:
> Stanislav Maslovski wrote:
>  > Hello,

[ skipped ]

>  > Putting aside the memleak flame, parsing locale string is simple, perhaps,
>  > this is an acceptable solution.
> 
> Hmmm...seems you are confused on the definition of "flame", too. It must make 
> you feel better to nonchalantly insult others than to admit that you made a mistake.

Steven, I did not have an intention to really insult you, in the case you
consider my 'sarcastic' tone insulting, I am appologising.

People tend to read in between lines and assume things. Therefore, for the ease
of life, I sweer to God that when sending future patches to linuxdcpp I will never
ever skip a free() call, should I consider that complitely harmless in a given case
or not.

And thank you for developing linuxcdcpp, we all appreciate your effort!

-- 
Stanislav


From steven.sheehy at gmail.com  Sat Mar 17 17:32:45 2007
From: steven.sheehy at gmail.com (Steven Sheehy)
Date: Sat, 17 Mar 2007 11:32:45 -0500
Subject: [Linuxdcpp-developers] [PATCH] parse locale string to get	the
 charset
In-Reply-To: <20070313084406.GA32763@shota.mine.nu>
References: <20070309094341.GA27753@shota.mine.nu>
	<45F1FD66.2020405@gmail.com>	<fc8d89e90703092328u52ed863yf090d68066b71abd@mail.gmail.com>	<45F3775F.8030904@gmail.com>
	<20070312090407.GA26621@shota.mine.nu>	<20070312093741.GA27848@shota.mine.nu>
	<45F609BB.4020404@gmail.com> <20070313084406.GA32763@shota.mine.nu>
Message-ID: <45FC182D.7030107@gmail.com>

Stanislav Maslovski wrote:
> Hello,
> 
> On Mon, Mar 12, 2007 at 09:17:31PM -0500, Steven Sheehy wrote:
>> Stanislav Maslovski wrote:
>>  > Hello,
> 
> [ skipped ]
> 
>>  > Putting aside the memleak flame, parsing locale string is simple, perhaps,
>>  > this is an acceptable solution.
>>
>> Hmmm...seems you are confused on the definition of "flame", too. It must make 
>> you feel better to nonchalantly insult others than to admit that you made a mistake.
> 
> Steven, I did not have an intention to really insult you, in the case you
> consider my 'sarcastic' tone insulting, I am appologising.
> 
> People tend to read in between lines and assume things. Therefore, for the ease
> of life, I sweer to God that when sending future patches to linuxdcpp I will never
> ever skip a free() call, should I consider that complitely harmless in a given case
> or not.
> 
> And thank you for developing linuxcdcpp, we all appreciate your effort!
> 

Ok, guess it was just a misunderstanding. No hard feelings.


From steven.sheehy at gmail.com  Sat Mar 17 17:45:39 2007
From: steven.sheehy at gmail.com (Steven Sheehy)
Date: Sat, 17 Mar 2007 11:45:39 -0500
Subject: [Linuxdcpp-developers] [PATCH] getting filelists from users
 with nicks in localized	charsets (russian, etc.)
In-Reply-To: <20070309090138.GA25367@shota.mine.nu>
References: <20070309090138.GA25367@shota.mine.nu>
Message-ID: <45FC1B33.7050400@gmail.com>

Stanislav Maslovski wrote:
> Consider a client operating in active mode. In order to get a filelist
> NmdcHub::connectToMe() first places the triplet (( peerNick, myNick, hubUrl ))
> on the list of expected connections. Internally, nicks are stored in utf-8.
> Note that peerNick in this triplet gets stored also in utf-8.
> 
> Next, NmdcHub::connectToMe() sends
> "$ConnectToMe " + toAcp(peerNick) + ....
> 
> So far so good. Now the peer connects. ConnectionManager::accept() creates
> new UserConnection, sets flags, etc. but because it does not know anything
> about peer's encoding (the new connection can be from an arbitrary user from
> arbitrary hub) it leaves it with the default (which is Text::systemCharset).
> 
> Now peer sends
> $MyNick peerNick_in_acp
> 
> UserConnection::on() receives this, blindly translates peerNick_in_acp to
> utf-8 from the encoding associated with the connection (which is
> Text::systemCharset at the moment). If peer's encoding was different we get
> an obvious result: the connection is rejected in ConnectionManager::on(MyNick)
> because the translation fails and the peer is not found in the list of
> expected connections.
> 
> Here goes an example session (text below contains russian chars):
> 
> NmdcHub::connect ????????
> NmdcHub::connectToMe ????????
> BufferedSocket::accept() 0x86d2a00
> BufferedSocket::run() start 0x86d2a00
> ConnectionManager::onMyNick 0x86974e0, ________
> Unknown incoming connection from ________
> BufferedSocket::run() end 0x86d2a00
> 
> In this example, the system locale was ru_RU.UTF-8, but the hub charset was CP1251.
> If someone thinks that setting locale to CP1251 will solve the problem, then it
> is not so, because there always will be hubs with different encodings and we
> want linuxdcpp operate _simultaneously_ on all of them.
> 
> The attached patch solves this in the following way. First, the peer nick is
> stored on the list of expected connections in ACP, not in uft-8. This is not
> a problem, because the stored nick is just a key and is not used for any
> other purpose. Next, when UserConnection::on() receives $MyNick it is passed
> further untranslated. Peer's nick gets translated to utf-8 later inside
> ConnectionManager::on(MyNick) when it becomes possible to determine and set
> the correct encoding.
> 
> This all can be seen directly from the patch, of course. Perhaps, a better
> way of doing things could be to separate incomming connection checking from
> ConnectionManager::on(MyNick) and put it in UserConnection::on() or do
> something similar.
> 
> 
> 

Yep, this is a definite problem. I could've swore I searched for all calls to 
"new UserConnection" and ensured that setEncoding() was called on it, but I 
guess I missed one. Your approach is valid, but I would prefer to see it done 
differently. It would be better to store the exact acp nick that initially comes 
over the socket somewhere so that it can be retrieved later. Going from acp -> 
utf-8 -> acp could potentially produce a different string from the initial string.


From stanislav.maslovski at gmail.com  Sat Mar 17 20:54:26 2007
From: stanislav.maslovski at gmail.com (Stanislav Maslovski)
Date: Sat, 17 Mar 2007 22:54:26 +0300
Subject: [Linuxdcpp-developers] [PATCH] getting filelists from
	users	with nicks in localized charsets (russian, etc.)
In-Reply-To: <45FC1B33.7050400@gmail.com>
References: <20070309090138.GA25367@shota.mine.nu> <45FC1B33.7050400@gmail.com>
Message-ID: <20070317195426.GA5552@shota.mine.nu>

On Sat, Mar 17, 2007 at 11:45:39AM -0500, Steven Sheehy wrote:
> Stanislav Maslovski wrote:

[ skipped ]

> > The attached patch solves this in the following way. First, the peer nick is
> > stored on the list of expected connections in ACP, not in uft-8. This is not
> > a problem, because the stored nick is just a key and is not used for any
> > other purpose. Next, when UserConnection::on() receives $MyNick it is passed
> > further untranslated. Peer's nick gets translated to utf-8 later inside
> > ConnectionManager::on(MyNick) when it becomes possible to determine and set
> > the correct encoding.
> > 
> > This all can be seen directly from the patch, of course. Perhaps, a better
> > way of doing things could be to separate incomming connection checking from
> > ConnectionManager::on(MyNick) and put it in UserConnection::on() or do
> > something similar.
> > 
> > 
> > 
> 
> Yep, this is a definite problem. I could've swore I searched for all calls to 
> "new UserConnection" and ensured that setEncoding() was called on it, but I 
> guess I missed one. Your approach is valid, but I would prefer to see it done 
> differently. It would be better to store the exact acp nick that initially comes 
> over the socket somewhere so that it can be retrieved later. Going from acp -> 
> utf-8 -> acp could potentially produce a different string from the initial string.

Hm. If this is so, then we are in a real trouble, because such conversions
from acp -> utf-8 -> acp are all over the place ;)

-- 
Stanislav


From pelzi at pelzi.net  Sat Mar 17 21:12:37 2007
From: pelzi at pelzi.net (Jussi Peltola)
Date: Sat, 17 Mar 2007 22:12:37 +0200
Subject: [Linuxdcpp-developers] [PATCH] getting filelists from users
	with nicks in localized charsets (russian, etc.)
In-Reply-To: <20070317195426.GA5552@shota.mine.nu>
References: <20070309090138.GA25367@shota.mine.nu> <45FC1B33.7050400@gmail.com>
	<20070317195426.GA5552@shota.mine.nu>
Message-ID: <20070317201237.GE18164@hemmo.net>

On Sat, Mar 17, 2007 at 10:54:26PM +0300, Stanislav Maslovski wrote:
> Hm. If this is so, then we are in a real trouble, because such conversions
> from acp -> utf-8 -> acp are all over the place ;)

This is true, we should try to avoid that. Real world network
applications must be liberal in the input they accept, and unfortunately
invalid bytes in strings are commonplace. This problem is especially
real in DC because there are more clients than one can count and most of
them are written without any thought about character encodings. The
protocol also has strings like nicks that are both displayed to the
users and used as identifiers that need to stay the same byte for byte.
The unix filesystem has a similar problem, filenames can contain any
byte sequence except null and /, and filenames are also identifiers and
strings that are displayed to the user.

Reworking the code to avoid conversions except when displaying strings
to users is the most reliable way, but that's quite a big chore. If that
can be achieved easily with this, it's a good beginning and we should go
for it.



From admin at berlios.de  Sun Mar 18 22:36:47 2007
From: admin at berlios.de (admin at berlios.de)
Date: Sun, 18 Mar 2007 22:36:47 +0100 (CET)
Subject: [Linuxdcpp-developers] [Feature #3241] Hub name in title bar
Message-ID: <200703182136.l2ILalNY017267@unicorn.berlios.de>

Feature Request #3241, was updated on 2007-Mar-18 22:36
You can respond by visiting: 
http://developer.berlios.de/feature/?func=detailfeature&feature_id=3241&group_id=2230

Category: None
Status: Open
Priority: 5
Summary: Hub name in title bar

By: centurion
Date: 2007-Mar-18 22:36

Message:
Logged In: YES 
user_id=27822
Browser: Mozilla/5.0 (X11; U; Linux i686; pl; rv:1.8.1.1) Gecko/20061208 Firefox/2.0.0.1

Hello

It's possible to add feature that submit hub name and
hub topic (on $HubName) to window title bar? Currently
there is only "Linux DC++" all the time, and it will
look much more better with the name/topic of the
current marked hub. 

----------------------------------------------------------------------
You can respond by visiting: 
http://developer.berlios.de/feature/?func=detailfeature&feature_id=3241&group_id=2230


From admin at berlios.de  Thu Mar 22 11:30:37 2007
From: admin at berlios.de (admin at berlios.de)
Date: Thu, 22 Mar 2007 13:30:37 +0300 (MSK)
Subject: [Linuxdcpp-developers] [Bug #10706] Extremely high memory usage
Message-ID: <200703221030.l2MAUbRi009135@unicorn.berlios.de>

Bug #10706, was updated on 2007-Mar-22 13:30
Here is a current snapshot of the bug.

Project: LinuxDC++
Category: None
Status: Open
Resolution: None
Bug Group: None
Priority: 5
Submitted by: sgalanov
Assigned to : none
Summary: Extremely high memory usage

Details: The amount of memory linuxdcpp needs to run is very high. I have a 500Gb share. At the start it eats all my RAM (about 1Gb) and considerable amount of swap space. 
If I understand correctly, this happens as a result of loading HashIndex.xml (of 400Mb size). First of all, it is loaded entirely into memory (which is obviously not needed because essentially it is being analyzed line by line). After that much more memory is used. I don't know exactly for what purpose, but anyway hash loading clearly should be revised.
This problem makes linuxdcpp (otherwise a very nice client) almost unusable.

For detailed info, follow this link:
http://developer.berlios.de/bugs/?func=detailbug&bug_id=10706&group_id=2230


From cvs at linuxdcpp.berlios.de  Sat Mar 24 19:33:22 2007
From: cvs at linuxdcpp.berlios.de (cvs at linuxdcpp.berlios.de)
Date: Sat, 24 Mar 2007 19:33:22 +0100
Subject: [Linuxdcpp-developers] CVS Commit
Message-ID: <200703241833.l2OIXMsm000632@sheep.berlios.de>

A non-text attachment was scrubbed...
Name: not available
Type: text/xml
Size: 3323 bytes
Desc: not available
URL: <https://lists.berlios.de/pipermail/linuxdcpp-developers/attachments/20070324/f13b0b2d/attachment.xml>

From stanislav.maslovski at gmail.com  Sun Mar 25 14:15:10 2007
From: stanislav.maslovski at gmail.com (Stanislav Maslovski)
Date: Sun, 25 Mar 2007 16:15:10 +0400
Subject: [Linuxdcpp-developers] [PATCH] getting filelists from
	users	with nicks in localized charsets (russian, etc.)
In-Reply-To: <45FC1B33.7050400@gmail.com>
References: <20070309090138.GA25367@shota.mine.nu> <45FC1B33.7050400@gmail.com>
Message-ID: <20070325121510.GA3089@shota.mine.nu>

In case if someone on this mailing list uses my patch, here is an updated version
reflecting recent changes in the CVS. Attached.



-- 
Stanislav
-------------- next part --------------
A non-text attachment was scrubbed...
Name: linuxdcpp_cvs20070325_encoding_patch.diff
Type: text/x-diff
Size: 3689 bytes
Desc: not available
URL: <https://lists.berlios.de/pipermail/linuxdcpp-developers/attachments/20070325/a4425a55/attachment.diff>

From cvs at linuxdcpp.berlios.de  Wed Mar 28 02:03:17 2007
From: cvs at linuxdcpp.berlios.de (cvs at linuxdcpp.berlios.de)
Date: Wed, 28 Mar 2007 02:03:17 +0200
Subject: [Linuxdcpp-developers] CVS Commit
Message-ID: <200703280003.l2S03HTp009807@sheep.berlios.de>

A non-text attachment was scrubbed...
Name: not available
Type: text/xml
Size: 544 bytes
Desc: not available
URL: <https://lists.berlios.de/pipermail/linuxdcpp-developers/attachments/20070328/8a22b63e/attachment.xml>

From mgarski at post.pl  Sat Mar 31 00:50:14 2007
From: mgarski at post.pl (Marcin Garski)
Date: Sat, 31 Mar 2007 00:50:14 +0200
Subject: [Linuxdcpp-developers] Official release of LinuxDC++?
Message-ID: <460D9426.2070608@post.pl>

Hello,

I'm trying to push LinuxDC++ into Fedora repository
(https://bugzilla.redhat.com/bugzilla/show_bug.cgi?id=234331), but I've
encounter one major problem. The person who reviews my package said that
it won't be included because it's a development release from CVS.

So my question is, when are you planing alpha/beta/stable release of 
LinuxDC++? It allows me to pass package review and include LinuxDC++ in 
Fedora repo.

-- 
Best Regards
Marcin Garski


From steven.sheehy at gmail.com  Sat Mar 31 02:21:55 2007
From: steven.sheehy at gmail.com (Steven Sheehy)
Date: Fri, 30 Mar 2007 19:21:55 -0500
Subject: [Linuxdcpp-developers] Official release of LinuxDC++?
In-Reply-To: <460D9426.2070608@post.pl>
References: <460D9426.2070608@post.pl>
Message-ID: <460DA9A3.3040709@gmail.com>

Marcin Garski wrote:
> Hello,
> 
> I'm trying to push LinuxDC++ into Fedora repository
> (https://bugzilla.redhat.com/bugzilla/show_bug.cgi?id=234331), but I've
> encounter one major problem. The person who reviews my package said that
> it won't be included because it's a development release from CVS.
> 
> So my question is, when are you planing alpha/beta/stable release of 
> LinuxDC++? It allows me to pass package review and include LinuxDC++ in 
> Fedora repo.
> 

I had originally planned to get a release out late last year, but I had to fix 
two major problems first that delayed any such plans. The first was charset 
support, which took me a lot longer than anticipated since I had to change a 
huge portion of the dcpp core and get it accepted upstream. Now I'm trying to 
add i18n support, but again the dcpp core is giving me huge problems (doesn't 
work with gettext). I have to work with dcpp's maintainer in order to come up 
with a solution, then implement it.

So the only thing holding back a release is the incomplete i18n support, which 
could take one or two months more to complete (at my slow pace, anyway). At that 
time, I will either release a 1.0 beta or a 1.0 (haven't decided which; we've 
basically been in alpha and/or beta for 2 years now). This is probably not the 
time frame you were wanting, but it's the truth. You can try pointing out to 
them it's both in Gentoo and Debian and see if that helps them accept it. Also, 
they no doubt have ffmpeg in their repository which, like us, doesn't make releases.

-Steven


From admin at berlios.de  Sat Mar 31 17:44:55 2007
From: admin at berlios.de (admin at berlios.de)
Date: Sat, 31 Mar 2007 06:44:55 -0900 (AKST)
Subject: [Linuxdcpp-developers] [Bug #10791] Could not retrieve filelists
	from users with cyrillic names
Message-ID: <200703311544.l2VFitqt027134@unicorn.berlios.de>

Bug #10791, was updated on 2007-Mar-31 06:44
Here is a current snapshot of the bug.

Project: LinuxDC++
Category: None
Status: Open
Resolution: None
Bug Group: None
Priority: 5
Submitted by: kryshen
Assigned to : none
Summary: Could not retrieve filelists from users with cyrillic names

Details: When I try to get filelist from a user who have cyrillic characters in his nickname, linuxdcpp displays "Connecting..." status for several minutes, then fails with timeout error.


For detailed info, follow this link:
http://developer.berlios.de/bugs/?func=detailbug&bug_id=10791&group_id=2230


From mgarski at post.pl  Sat Mar 31 18:21:23 2007
From: mgarski at post.pl (Marcin Garski)
Date: Sat, 31 Mar 2007 18:21:23 +0200
Subject: [Linuxdcpp-developers] [PATCH] Support for Windows-1250 encoding
Message-ID: <460E8A83.7080103@post.pl>

Hi,

Here's the patch that add support for Windows-1250 (CP1250) code page, 
commonly used on Polish hubs (probably also in others Central European 
countries).

-- 
Best Regards
Marcin Garski
-------------- next part --------------
An embedded and charset-unspecified text was scrubbed...
Name: linuxdcpp-cp1250.patch
URL: <https://lists.berlios.de/pipermail/linuxdcpp-developers/attachments/20070331/043f7ee8/attachment.ksh>

From steven.sheehy at gmail.com  Sat Mar 31 19:21:40 2007
From: steven.sheehy at gmail.com (Steven Sheehy)
Date: Sat, 31 Mar 2007 12:21:40 -0500
Subject: [Linuxdcpp-developers] [PATCH] Support for Windows-1250 encoding
In-Reply-To: <460E8A83.7080103@post.pl>
References: <460E8A83.7080103@post.pl>
Message-ID: <460E98A4.9050307@gmail.com>

Marcin Garski wrote:
> Hi,
> 
> Here's the patch that add support for Windows-1250 (CP1250) code page, 
> commonly used on Polish hubs (probably also in others Central European 
> countries).
> 
> 

With the update on 2007-03-24, you can directly type in a character encoding of 
your choice instead of choosing a value in the drop-down box, so I don't see the 
need for this patch.

-Steven


From toots at rastageeks.org  Sat Mar 31 19:51:36 2007
From: toots at rastageeks.org (Romain Beauxis)
Date: Sat, 31 Mar 2007 19:51:36 +0200
Subject: [Linuxdcpp-developers] Official release of LinuxDC++?
In-Reply-To: <460D9426.2070608@post.pl>
References: <460D9426.2070608@post.pl>
Message-ID: <200703311951.36940.toots@rastageeks.org>

Le samedi 31 mars 2007 00:50, Marcin Garski a ?crit?:
> Hello,

	Hi !

> I'm trying to push LinuxDC++ into Fedora repository
> (https://bugzilla.redhat.com/bugzilla/show_bug.cgi?id=234331), but I've
> encounter one major problem. The person who reviews my package said that
> it won't be included because it's a development release from CVS.
>
> So my question is, when are you planing alpha/beta/stable release of
> LinuxDC++? It allows me to pass package review and include LinuxDC++ in
> Fedora repo.

I've been packaging linuxdcpp without any major issue for months now in debian 
if this can help you..


Romain
-- 
'mama say
son, I ain't got no food today
tit for tat, butter for fish
there's a little porridge in the dish


